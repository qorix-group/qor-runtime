searchState.loadedDescShard("foundation", 0, "Minimal, very fast basic random num gen, suitable when …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA struct wrapping the iceoryx2 Queue\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTake a look, if the queue is empty.\nInitialize a MpmcQueue\nPop an item from the queue.\nPop multiple items into a slice. The queue lock is taken …\nPush an item into the queue.\nDelivers access for push &amp; pop actions for a …\nDelivers access for push &amp; pop actions for a …\nLock free queue for Single-Producer-Multiple-Consumer, …\nReturns number of elements the queue can hold at max\nReturns number of elements in the queue\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreated <code>LocalProducerConsumer</code> if there is any existing, …\nCreated <code>LocalProducerConsumer</code> if there is any existing, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct new queue of size <code>size</code>. It will panic if …\nPops single value out of Queue\nPops single value out of Queue\nTries to push a single <code>value</code> to the local queue. If that …\nPushes single value to the Queue\nLet caller steal a work from other queue into its queue\nCondition variable which requires a fixed predicate on …\nBuilder for the <code>MultiConditionVariable</code> and the …\nProvides access to the underlying type and predicate of a …\nThe <code>ConditionVariableError</code> enum is a generalization when …\nIs returned by the <code>ConditionVariable</code> in …\nThe “debug” level.\nThe “error” level.\nRelocatable vector with compile time fixed size capacity. …\nRepresents a handle that is in general inter-process …\nThe “info” level.\nThe priority of a thread holding the mutex is always …\niceoryx2 implementation of an atomic that has an internal …\nBehaves like <code>core::sync::atomic::AtomicBool</code>\nBehaves like <code>core::sync::atomic::AtomicI16</code>\nBehaves like <code>core::sync::atomic::AtomicI32</code>\nBehaves like <code>core::sync::atomic::AtomicI64</code>\nBehaves like <code>core::sync::atomic::AtomicI8</code>\nBehaves like <code>core::sync::atomic::AtomicIsize</code>\nBehaves like <code>core::sync::atomic::AtomicU16</code>\nBehaves like <code>core::sync::atomic::AtomicU32</code>\nBehaves like <code>core::sync::atomic::AtomicU64</code>\nBehaves like <code>core::sync::atomic::AtomicU8</code>\nBehaves like <code>core::sync::atomic::AtomicUsize</code>\nRepresents struct that can be configured for inter-process …\nDescribes the level of verbosity of a span or event.\nCondition variable which allows to use multiple conditions …\nIs returned by the <code>MultiConditionVariable</code> in …\nRepresents a POSIX mutex which can be created by the …\nCreates a <code>Mutex</code>.\nThe MutexError enum is a generalization when one doesn’t …\nA guard which allows the modification of a value guarded …\nDefines how the priority of a mutex owning thread changes …\nDefines the behavior when a mutex owning thread is …\nThe type of a mutex defines its behavior.\nNo change in priority\ndefault behavior\nThe priority of a thread holding the mutex is promoted to …\nthe mutex can be locked multiple times by the same thread\nIt implies the same behavior as …\n<strong>Non-movable</strong> relocatable vector with runtime fixed size …\nThe mutex stays locked, is unlockable and no longer …\nThe “trace” level.\nVector with run-time fixed size capacity. In contrast to …\nThe “warn” level.\nif the call <code>Mutex::lock()</code> would cause a deadlock it …\nReturns a mutable slice to the contents of the vector\nSee <code>core::sync::atomic::AtomicU64::as_ptr()</code>\nReturns a slice to the contents of the vector\nReturns the string representation of the <code>Level</code>.\nWaits until the condition variable was signaled by …\nWaits until the condition variable was signaled by …\nCalls wrapped closure and returns it result.\nReturns the capacity of the vector\nRemoves all elements from the vector\nDefines the type of clock which should be used for …\nDefines the <code>ClockType</code> which should be used in …\nSee <code>core::sync::atomic::AtomicU64::compare_exchange()</code>\nSee <code>core::sync::atomic::AtomicU64::compare_exchange_weak()</code>\nCreates a new mutex with a guarded value.\nCreates a <code>ConditionVariable</code> encapsulating the value of …\nCreates a <code>MultiConditionVariable</code> encapsulating the value …\nConstructs an event at the debug level.\nConstructs an event at the error level.\nAppend all elements from other via <code>Clone</code>.\nSee <code>core::sync::atomic::AtomicU64::fetch_add()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_and()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_max()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_min()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_nand()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_or()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_sub()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_update()</code>\nSee <code>core::sync::atomic::AtomicU64::fetch_xor()</code>\nFill the remaining space of the vector with value.\nFill the remaining space of the vector with value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an IPC Capable object from its handle.\nConstructs an event at the info level.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>core::sync::atomic::AtomicU64::into_inner()</code>\nReturns true if the vector is empty, otherwise false\nReturns true if the vector is full, otherwise false\nReturns true if the object is interprocess capable, …\nEnable interprocess capabilities for the condition …\nCan the same mutex be used from multiple processes.\nReturns the number of elements stored inside the vector\nSee <code>core::sync::atomic::AtomicU64::load()</code>\nReturns a <code>MutexGuard</code> which can be used to read/write the …\nBlocks until the ownership of the lock could be acquired. …\nIf the previously owning thread has died and …\nApplies the modifier to the underlying value and notifies …\nApplies the modifier to the underlying value and notifies …\nApplies the modifier to the underlying value and notifies …\nDefines the mutex type of the underlying mutex\n<code>MutexType</code> defines the behavior of the mutex.\nSee <code>core::sync::atomic::AtomicU64::new()</code>\nCreates a new vector.\nConstructs new instance of wrapper from specified closure. …\nReturns a <code>MultiConditionVariableGuard</code> which provides …\nReturns a <code>ConditionVariableGuard</code> which provides read/write …\nReturns a <code>ConditionVariableGuard</code> which provides read/write …\nRemoves the last element of the vector and returns it to …\nThe predicate of the condition variable\nDefines the priority ceiling of the underlying mutex\nDefines to priority to which a thread is promoted when …\nReturns the current priority ceiling of the mutex.\nDefines the priority inheritance of the underlying mutex\nDefines the <code>MutexPriorityInheritance</code> mode.\nAdds an element at the end of the vector. If the vector is …\nSets a new priority ceiling for the mutex and returns the …\nSpans represent periods of time in which a program was …\nConstructs a new span.\nSee <code>core::sync::atomic::AtomicU64::store()</code>\nSee <code>core::sync::atomic::AtomicU64::swap()</code>\nDefines the thread termination behavior of the underlying …\nDefines the <code>MutexThreadTerminationBehavior</code>.\nTries to return a <code>MutexGuard</code> which can be used to …\nTries to acquire the ownership of the lock until the …\nWaits until the condition variable was signaled by notify_…\nWaits until the condition variable was signaled by …\nWaits until the condition variable was signaled by …\nConstructs an event at the trace level.\nNotifies all waiters.\nNotifies one waiter.\nTries to return a <code>MutexGuard</code> which can be used to …\nTries to acquire the ownership of the lock. If it was …\nThe current value of the condition variable\nWaits until the condition variable was signaled by notify_…\nConstructs an event at the warn level.\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nConstructs a new <code>Span</code> as child of the given parent span, …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nReturns a handle to the span considered by the <code>Subscriber</code> …\nEnters this span, returning a guard that will exit the …\nEnters this span, consuming it and returning a guard that …\nExits this span, returning the underlying <code>Span</code>.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the set of all fields defined by this span’s …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nReturns this span’s <code>Id</code>, if it is enabled.\nExecutes the given function in the context of this span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns true if the new span’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns a reference to the new span’s metadata.\nConstructs a new <code>Span</code> with the given metadata and set of …\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nReturns <code>Attributes</code> describing a new span at the root of …\nConstructs a new span that is <em>completely disabled</em>.\nReturns this span, if it was enabled by the current …\nReturns the new span’s explicitly-specified parent, if …\nRecords that the field described by <code>field</code> has the value …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nRecords all the fields in the provided <code>ValueSet</code>.\nReturns a reference to a <code>ValueSet</code> containing any values …\nInvokes a function with a reference to this span’s ID …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")