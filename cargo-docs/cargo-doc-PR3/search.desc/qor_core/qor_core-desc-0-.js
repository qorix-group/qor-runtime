searchState.loadedDescShard("qor_core", 0, "Contains the error value\nBase class for errors\nError code The qor system error codes are structures error …\nContains the success value\nSemantic Version\nGet the code of an error\nCreate a new error code from a <code>&amp;&#39;static str</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new error code without an error text\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new error code from a dynamic string\nThe core preample publicly re-exports the most common …\nGet the error text\nA component is an element with a simple life cycle\nState of the component\nReturns the argument unchanged.\nInitialize the component After this the component is ready …\nCalls <code>U::from(self)</code>.\nSetup the component The component will continue …\nConfiguration structure\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe collection is empty.\nThe collection is full.\nId passed is not valid.\nTag passed is not valid.\nA required lock could not be acquired.\nFunction is not implemented yet\nError during parsing of a string or stream.\nThe requested feature is not supported.\nFNV1a as 32 bit hasher for short strings\nFNV1a Hashing function for use in constant expressions.\nFNV1a as 64 bit hasher for short strings\nA speedy hash algorithm for use within rustc. The hashmap …\nCreate a FNV1a by extending a previous hash\nFinalize the hasher and return hash code.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new FNV1a hasher from byte array\nCreate new FNV1a hasher from seed\nCreate new FNV1a hasher from string\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNew const FNV1a hasher\nId type\nA name tag\nReturns the argument unchanged.\nCreate the Tag from a string value.\nReturns the argument unchanged.\nCreate a new tag from a constant value\nCreate a new tag from a raw value\nCreate a new tag by hashing the passed string.\nGet the Id as index\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new invalid Id\nCreate a new invalid tag\nInvalidate the Id\nInvalidate the tag\nCheck validity of Id\nCheck if tag is valid\nCreate a new id with the given index number\nCreate a new tag from a constant.\nGet the tag value\nCreate a new tag from existing by adding a string\nCreate a new tag from existing by adding another tag\nArray type value.\nBoolean type value.\nContains the error value\nContains the error value\nSerialization error. This error only happens when some …\nConvenient type alias for serialization results.\nJSON serializer for <code>JsonValue</code>.\nParse error.\nConvenient type alias for parse results.\nJSON parser to parse UTF-8 string into <code>JsonValue</code> value.\nEnum to represent one JSON value. Each variant represents …\nNull type value.\nNumber type value.\nObject type value.\nContains the success value\nContains the success value\nString type value.\nGet the column numbr where the parse error happened. This …\nConvert this JSON value to <code>String</code> value with 2-spaces …\nWrite this JSON value to the given <code>io::Write</code> object as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSerialize the <code>JsonValue</code> into UTF-8 byte sequence. The …\nGet immutable reference to the inner value.\nGet mutable reference to the inner value.\nSet indent string. This will be used by …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the inner value is an array.\nCheck if the inner value is a boolean.\nCheck if the inner value is null.\nCheck if the inner value is a number.\nCheck if the inner value is an object.\nCheck if the inner value is a string.\nGet the line numbr where the parse error happened. This …\nCreate a new <code>JsonGenerator</code> object. The serialized byte …\nCreate a new parser instance from an iterator which …\nRun the parser to parse one JSON value.\nConvert this JSON value to <code>String</code> value.\nWrite this JSON value to the given <code>io::Write</code> object as …\nThe coherent trait marks a type as coherent in memory.\nThe Coherent trait declares a type as float\nTrait that returns the Inf value of a type Inf is the …\nThe Integral trait declares a type as integral\nThe Lockfree marker trait defines a type as atomically …\nTrait that returns the One value of a type One is defined …\nThe Reloc marker trait defines a type as relocatable in …\nThe Scalar trait declares a type as scalar\nConstant string type\nTYPE_TAG is a unique tag for each type\nCompiler-independent type IDs for built-in types\nIndicator trait that a type supports compiler-independent …\nTrait that returns the ZERO value of a type Zero is …\nThe brain float 16 type\nThe half-precision IEEE754 float 16 type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")