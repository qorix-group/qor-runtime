searchState.loadedDescShard("logging_tracing", 0, "Logs events from App and if <code>traced</code> is running also logs …\nLogs app event to <code>traced</code> and the events need to be dumped …\n@brief Creates a span for the process/ function which …\nEnables logging\nEnables tracing in given mode\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe “debug” level.\nThe “error” level.\nThe “info” level.\nDescribes the level of verbosity of a span or event.\nThe “trace” level.\nThe “warn” level.\nReturns the string representation of the <code>Level</code>.\nConstructs an event at the debug level.\nConstructs an event at the error level.\nReturns the argument unchanged.\nConstructs an event at the info level.\nAttach a span to a <code>std::future::Future</code>.\nInstruments a function to create and enter a <code>tracing</code> span …\nCalls <code>U::from(self)</code>.\nSpans represent periods of time in which a program was …\nConstructs a new span.\nConstructs an event at the trace level.\nConstructs an event at the warn level.\nAttaches spans to a <code>std::future::Future</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> <code>Span</code>.\nA <code>Future</code> that has been instrumented with a <code>tracing</code> …\nExtension trait allowing futures to be instrumented with a …\nBorrows the <code>Dispatch</code> that is entered when this type is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInstruments this type with the current <code>Span</code>, returning an …\nBorrows the wrapped type.\nBorrows the wrapped type.\nMutably borrows the wrapped type.\nMutably borrows the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned mutable reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nGet a pinned reference to the wrapped type.\nInstruments this type with the provided <code>Span</code>, returning an …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nConsumes the <code>Instrumented</code>, returning the wrapped type.\nBorrows the <code>Span</code> that this type is instrumented by.\nMutably borrows the <code>Span</code> that this type is instrumented by.\nAttaches the current default <code>Subscriber</code> to this type, …\nAttaches the provided <code>Subscriber</code> to this type, returning a …\nTrait implemented by types which have a span <code>Id</code>.\nAttributes provided to a <code>Subscriber</code> describing a new span …\nA guard representing a span which has been entered and is …\nAn owned version of <code>Entered</code>, a guard representing a span …\nIdentifies a span within the context of a subscriber.\nA set of fields recorded by a span.\nA handle representing a span, with the capability to enter …\nReturns the <code>Id</code> of the span that <code>self</code> corresponds to, or …\nConstructs a new <code>Span</code> as child of the given parent span, …\nReturns <code>Attributes</code> describing a new child span of the …\nReturns <code>true</code> if this set of <code>Attributes</code> contains a value …\nReturns <code>true</code> if this <code>Record</code> contains a value for the given …\nReturns a handle to the span considered by the <code>Subscriber</code> …\nEnters this span, returning a guard that will exit the …\nEnters this span, consuming it and returning a guard that …\nExits this span, returning the underlying <code>Span</code>.\nReturns a <code>Field</code> for the field with the given <code>name</code>, if one …\nReturns the set of all fields defined by this span’s …\nIndicates that the span with the given ID has an indirect …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a new span ID from the given <code>NonZeroU64</code>.\nConstructs a new span ID from the given <code>u64</code>.\nReturns true if this <code>Span</code> has a field for the given <code>Field</code> …\nReturns this span’s <code>Id</code>, if it is enabled.\nReturns this span’s <code>Id</code>, if it is enabled.\nExecutes the given function in the context of this span.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the span’s ID as a <code>NonZeroU64</code>.\nReturns the span’s ID as a <code>u64</code>.\nReturns true if the new span’s parent should be …\nReturns <code>true</code> if this span was disabled by the subscriber …\nReturns true if this set of <code>Attributes</code> contains <em>no</em> values.\nReturns true if this <code>Record</code> contains <em>no</em> values.\nReturns <code>true</code> if this span was constructed by <code>Span::none</code> …\nReturns true if the new span should be a root.\nReturns the number of fields that would be visited from …\nReturns this span’s <code>Metadata</code>, if it is enabled.\nReturns a reference to the new span’s metadata.\nConstructs a new <code>Span</code> with the given metadata and set of …\nReturns <code>Attributes</code> describing a new child span of the …\nConstructs a new <code>Record</code> from a <code>ValueSet</code>.\nConstructs a new disabled span with the given <code>Metadata</code>.\nConstructs a new <code>Span</code> as the root of its own trace tree, …\nReturns <code>Attributes</code> describing a new span at the root of …\nConstructs a new span that is <em>completely disabled</em>.\nReturns this span, if it was enabled by the current …\nReturns the new span’s explicitly-specified parent, if …\nRecords that the field described by <code>field</code> has the value …\nRecords all the fields in this set of <code>Attributes</code> with the …\nRecords all the fields in this <code>Record</code> with the provided …\nRecords all the fields in the provided <code>ValueSet</code>.\nReturns a reference to a <code>ValueSet</code> containing any values …\nInvokes a function with a reference to this span’s ID …")