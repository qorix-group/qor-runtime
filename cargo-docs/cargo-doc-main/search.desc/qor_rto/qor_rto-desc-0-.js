searchState.loadedDescShard("qor_rto", 0, "Runtime Orchestration (RTO) is the central runtime control …\nThe AccurateClock is a clock that uses a monotonous system …\nThe Action trait describes the interface to an executable …\nAn Activity is an action that controls the …\nThe lifecycle of an activity.\nAdd is an RValue that combines two RValues with an …\nAnd is an RValue that combines two RValues with a logical …\nAssign copies the value from an RValue evaluation into an …\nAwait is an asynchronous call into a user-defined function …\nBreak action exits the loop it is in.\nAn internal break action has occurred during execution\nThe action is busy and requires more time to complete.\nA clock provides the current timepoint and can hold the …\nThe action has completed successfully and cannot update …\nThe execution element has completed successfully.\nA Computation is an action that executes multiple actions …\nA Concurrency is an action that executes other actions in …\nConstant is an RValue that always evaluates to the same …\nDiv is an RValue that combines two RValues with an …\nDivision by zero error\nAn engine runs tasks concurrently on threads. It is the …\nThe EngineBuilder configures an Engine as Executor\nEq is an RValue that compares two RValues and evaluates to …\nContains the error value\nContains the error value\nThe execution element state machine is in an invalid state …\nThe action is in a state where update is illegal\nError: Transition from an error state\nResult of the evaluation of an RValue\nAn <code>Event</code> signals the occurrence of the change of state.\nAn <code>EventAdapter</code> links an event implementation with the …\nUser expection with user defined code\nThe context of a program’s execution.\nAn ExecutionException represents a single expection thrown …\nCode type for execution exceptions Code ranges from 0 to …\nA filter for multiple exceptions\nId type for execution exceptions. Id ranges from 0 to 63\nPredefined exceptions for actions\nThe ExecutionState enum represents the runtime state of …\nThe ExecutionTransition enum represents the possible …\nA runtime failure has occurred\nA fiber is a lightweight cooperative thread running in a …\nFinalize: Transition from ExecutionState::Running to …\nFor is a finite loop that loops it’s body for a definite …\nForRange is a finite loop that loops a fixed number of …\nGt is an RValue that compares two RValues and evaluates to …\nGte is an RValue that compares two RValues and evaluates …\nIfThenElse is an action that executes a sequence of …\nInit: Transition from ExectuionState::Uninitialized or …\nThe action has encountered an interruption and cannot …\nUpdate is a synchronous call into a user-defined function …\nAn event for a single listener\nThe listener for a single event\nNotify implementation for Ipc event\nAn LValue is a data element that can be assigned a value. …\nListen trait for event listeners.\nA <code>Listener</code> is a handle to an event to receive notifications\nThe listener type for the event\nLoop is an infinite loop that loops it’s body until a …\nLt is an RValue that compares two RValues and evaluates to …\nLte is an RValue that compares two RValues and evaluates …\nThe maximum number of tasks that can be scheduled on the …\nThe maximum number of threads that can be used by the …\nMul is an RValue that combines two RValues with a …\nNeg is an RValue that negates another RValue <code>std::ops::Neg</code> …\nNeq is an RValue that compares two RValues and evaluates …\nNop is a no-operation action that does nothing\nNot is an RValue that inverts another RValue <code>std::ops::Not</code> …\nA <code>Notifier</code> is a handle to an event to trigger notifications\nThe notifier type for the event\nThe <code>Notify</code> trait is implemented by Notifiers\nContains the success value\nContains the success value\nOr is an RValue that combines two RValues with a logical …\nArithmetic overflow error\nA Predicate is a user-defined function that evaluates to …\nA program is the central control element for running …\nAn RValue delivers a value of type T upon request. The …\nThe execution element is ready to start.\nThe action is ready and can update again, but does not …\nThe required result type of a user-defined routine\nMemory module result type\nThe execution element is running.\nSequence is an action that executes a sequence of actions …\nAn event for a single listener\nThe listener for a single event\nNotify implementation for Single event\nSleep is an action that waits for a specified duration\nThe spawn function for creating new tasks\nStart: Transition from ExecutionState::Ready or …\nA State is a trait that represents a state storage with …\nA StateStorage is a state with a variable value that …\nSub is an RValue that combines two RValues with an …\nSync is an action that waits for a given <code>Event</code> to occur.\nA Task is the smallest unit of execution that can be …\nA TaskHandle is used to track a task after it has been …\nTerminate: Transition from ExecutionState::Ready or …\nThe execution element has been terminated.\nThrow action throws an exception with an optional timeout …\nTrigger is an action that triggers the given event\nTryCatch is an action that executes a try action and …\nArithmetic underflow error\nThe execution element has not been initialized.\nUpdate: Transition from ExecutionState::Running to …\nThe ActionResult enum represents the result of the update …\nA Variable is a trait that represents a scalar variable …\nA VariableStorage contains a single value storage …\nXor is an RValue that combines two RValues with a logical …\nAssign a value to the expression Hint: This assumes the …\nBuild the engine with the given configuration.\nCancel the task\nCheck if the subscribed event has received a notification …\nCheck if the subscribed event has received a notification …\nClear the task queue.\nGet the clock that is used by the engine to measure time.\nEvaluate the expression\nStop and finalize the action. This is a valid operation …\nGet the frequency of the clock, in Hz.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new task using the given future function. The …\nCheck if the task is in error state.\nChecks if the engine is idle. The engine is idle if\nInitialize a new action with the given actionable. This is …\nInitialize the engine.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the task has finished.\nCheck if the engine is ready to be started.\nCheck if the engine is running and can execute tasks.\nCheck if the engine is terminating.\nJoin the task and get the result.\nCreate a listener and subscibe it to the event The caller …\nGet the minimum timepoint of the clock. This is the …\nCreate a new task using the given async function. The …\nCreate a new builder with default values.\nCreate a new fiber with the given action\nCreate a new empty program\nCreate a notifier and register it to the event\nExecute a notification to the connected <code>Event</code>\nGet the current timepoint of the clock.\nWe implement Task also as Future so we allow to directly …\nPoll the future of the task associated with the task …\nGet the progress of the task\nReset the engine into post-initialization state.\nSend a stop signal to the engine. The engine will shut …\nSleep until the given timepoint.\nSpawn a new task on the engine.\nSpawn the program on the given execution engine.\nStart the action. This is a valid operation after the …\nStart the engine.\nReturns the current state of the action\nGet the current task state\nGet the current state of the engine.\nGet the state of the fiber#\nGet the state of the program\nGet the number of tasks that can be scheduled on the …\nGet the utilization of the tasks spawned on the engine.\nTerminate the action. This is a valid operation when the …\nGet the number of threads that can be used by the engine.\nGet the utilization of the engine’s threads.\nGet an uncaught interruption of the fiber\nUpdate the action with the given time delta. This is a …\nWait for the event to trigger.\nWait for the event to trigger with a timeout.\nAttach an action to the fiber\nAdd a concurrent action to the program\nSet the core group affinity of the threads that the engine …\nSet the cancellation handler for the task.\nSet the clock that the engine should use to measure time.\nAdd a fiber to the program\nSet the state change notifier for the task.\nSet the priority of the threads that the engine should use.\nSet the progress handler for the task.\nSet the name of the engine.\nSet the number of tasks that the engine should be able to …\nSet the number of threads that the engine should use.\nA program builder is a convenient way to build a program …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe all exception filter\nThe AccurateClock is a clock that uses a monotonous system …\nThe Action trait describes the interface to an executable …\nAn Activity is an action that controls the …\nThe lifecycle of an activity.\nAdd is an RValue that combines two RValues with an …\nAnd is an RValue that combines two RValues with a logical …\nAssign copies the value from an RValue evaluation into an …\nAwait is an asynchronous call into a user-defined function …\nBreak action exits the loop it is in.\nAn internal break action has occurred during execution\nThe action is busy and requires more time to complete.\nThe empty exception filter\nA clock provides the current timepoint and can hold the …\nThe action has completed successfully and cannot update …\nThe execution element has completed successfully.\nA Computation is an action that executes multiple actions …\nA Concurrency is an action that executes other actions in …\nConstant is an RValue that always evaluates to the same …\nDiv is an RValue that combines two RValues with an …\nDivision by zero error\nEq is an RValue that compares two RValues and evaluates to …\nContains the error value\nContains the error value\nThe execution element state machine is in an invalid state …\nThe action is in a state where update is illegal\nError: Transition from an error state\nResult of the evaluation of an RValue\nAn <code>Event</code> signals the occurrence of the change of state.\nAn <code>EventAdapter</code> links an event implementation with the …\nUser expection with user defined code\nThe context of a program’s execution.\nAn ExecutionException represents a single expection thrown …\nCode type for execution exceptions Code ranges from 0 to …\nA filter for multiple exceptions\nId type for execution exceptions. Id ranges from 0 to 63\nPredefined exceptions for actions\nThe ExecutionState enum represents the runtime state of …\nThe ExecutionTransition enum represents the possible …\nA runtime failure has occurred\nFinalize: Transition from ExecutionState::Running to …\nFor is a finite loop that loops it’s body for a definite …\nForRange is a finite loop that loops a fixed number of …\nGt is an RValue that compares two RValues and evaluates to …\nGte is an RValue that compares two RValues and evaluates …\nIfThenElse is an action that executes a sequence of …\nInit: Transition from ExectuionState::Uninitialized or …\nThe action has encountered an interruption and cannot …\nUpdate is a synchronous call into a user-defined function …\nAn event for a single listener\nThe listener for a single event\nNotify implementation for Ipc event\nAn LValue is a data element that can be assigned a value. …\nListen trait for event listeners.\nA <code>Listener</code> is a handle to an event to receive notifications\nThe listener type for the event\nLoop is an infinite loop that loops it’s body until a …\nLt is an RValue that compares two RValues and evaluates to …\nLte is an RValue that compares two RValues and evaluates …\nThe maximum exception id\nMul is an RValue that combines two RValues with a …\nNeg is an RValue that negates another RValue <code>std::ops::Neg</code> …\nNeq is an RValue that compares two RValues and evaluates …\nNop is a no-operation action that does nothing\nNot is an RValue that inverts another RValue <code>std::ops::Not</code> …\nA <code>Notifier</code> is a handle to an event to trigger notifications\nThe notifier type for the event\nThe <code>Notify</code> trait is implemented by Notifiers\nContains the success value\nContains the success value\nOr is an RValue that combines two RValues with a logical …\nArithmetic overflow error\nA Predicate is a user-defined function that evaluates to …\nAn RValue delivers a value of type T upon request. The …\nThe execution element is ready to start.\nThe action is ready and can update again, but does not …\nThe required result type of a user-defined routine\nMemory module result type\nThe execution element is running.\nThe system exception filter\nSequence is an action that executes a sequence of actions …\nAn event for a single listener\nThe listener for a single event\nNotify implementation for Single event\nSleep is an action that waits for a specified duration\nThe spawn function for creating new tasks\nStart: Transition from ExecutionState::Ready or …\nA State is a trait that represents a state storage with …\nA StateStorage is a state with a variable value that …\nSub is an RValue that combines two RValues with an …\nSync is an action that waits for a given <code>Event</code> to occur.\nTerminate: Transition from ExecutionState::Ready or …\nThe execution element has been terminated.\nThrow action throws an exception with an optional timeout …\nTrigger is an action that triggers the given event\nTryCatch is an action that executes a try action and …\nThe user exception filter\nThe user defined exception start id\nThe maximum user defined exception id\nArithmetic underflow error\nThe execution element has not been initialized.\nUpdate: Transition from ExecutionState::Running to …\nThe ActionResult enum represents the result of the update …\nA Variable is a trait that represents a scalar variable …\nA VariableStorage contains a single value storage …\nXor is an RValue that combines two RValues with a logical …\nAdds an action as branch to an existing Concurrency\nAdds an action as branch to the Computation\nAdds a new action to the Sequence\nGet the age of the clock.\nGet the age of the clock.\nGet the age of the clock.\nAdd an exception to the mask\nAssign a value to the expression Hint: This assumes the …\nCreates a new try-catch action that catches all exceptions\nCheck if the subscribed event has received a notification …\nCheck if the subscribed event has received a notification …\nGet the exception code\nEvaluate the expression\nStop and finalize the action. This is a valid operation …\nCreate a new exception filter for all exceptions\nCreate a new exception filter for the given exception\nCreate a new exception filter for system execptions\nCreate a new exception filter for a timeout exception …\nCreate a new exception filter for user execptions\nGet the frequency of the clock, in Hz.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new execution context\nconvert a u32 value to an execution state This is to use …\nInitialize a new action with the given actionable. This is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nconvert the execution state to a u32 value This is to use …\nCreate a new invalid exception\nCheck if the exception is valid\nCreate a listener and subscibe it to the event The caller …\nSubscribe a listener to the event\nCheck if a given exception matches the mask\nGet the minimum timepoint of the clock. This is the …\nCreate a new event\nCreates a new no-operation action\nCreates a new assign action\nCreates a new <code>Sleep</code> action\nCreates a new no-operation action\nCreates a new <code>Trigger</code> action\nCreates a new Activity action with given user-defined …\nCreates a new Call action with given routine\nCreates an (initially immediate) throw action for the …\nCreates a new empty try-catch action\nCreates a new concurrency action\nCreates a new Break action\nCreates a new loop action\nCreates a new loop action\nCreates a For loop action with iterator, begin and end …\nCreates a new Sequence action\nCreates a new Concurrency action\nCreates a new Concurrency action\nCreate a new uninitialized execution state\nCreate a new empty exception filter\nCreate a new user defined exception with the given code\nCreate a new Single event as <code>Event&lt;Single&gt;</code>\nCreate a new IpcEvent as <code>Event&lt;IpcEvent&gt;</code>\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreates a new Not expression\nCreate a new Single event\nCreates a new Await action with given routine.\nCreate a new Await action with a given method of a type …\nCreate a new Await action with a given method of a type …\nCreate a notifier and register it to the event\nOpen a notifier to the event\nExecute a notification to the connected <code>Event</code>\nGet the current timepoint of the clock.\nReturns the current timepoint\nPeek the successing state of the execution state machine …\nGet the period of the clock, in nanoseconds.\nGet the period of the clock, in nanoseconds.\nGet the period of the clock, in nanoseconds.\nCreates a new For loop action with a count This is a …\nReset the state to the value given\nSleep for the given duration.\nSleep for the given duration.\nSleep for the given duration.\nSleep until the given timepoint.\nSleeps for the until the given <code>Instant</code>\nSpawns a new task\nStart the action. This is a valid operation after the …\nReturns the current state of the action\nTerminate the action. This is a valid operation when the …\nCreates a timeout exception with a given timeout\nCreate a new timeout exception Convenience for …\nTransition into the given state\nUnwrap the execution state, panicking on error and …\nUpdate the action with the given time delta. This is a …\nCreate a new user defined exception Convenience for …\nWait for the event to trigger.\nWait for the event to trigger with a timeout.\nInitialize loop with a body\nInitialize loop with a body\nInitialize loop with a body\nAdds a new action to the Concurrency at initialization\nAdds a new action to the Computation at initialization\nSet the catch action\nAdds a new “else” action to the If-The-Else action\nAdds a new action to the Sequence at initialization\nAdds a new “then” action to the If-The-Else action\nAdd a timeout to the exception\nSet the try action\nPlaceholder for the engine error\nThe evaluation of an expression failed\nNo more subscribers can be added to the event\nThe event already has the given subscriber\nThe event is already subscribed\nAn invalid action was given\nAn invalid operation was given\nAn invalid state was given\nProgram build failed\nProgram misses binding to execution engine\nProgram misses binding to execution engine\n(Scheduled) task received a cancel signal but did not …\nTask completed but did not reveal a result.\nAn engine thread faulted on joining operation\nEngine thread failed to spawn")