searchState.loadedDescShard("orchestration", 0, "Action future type alias\nResult to indicate the given action status. [<code>Ok(())</code>] if …\nDescribes action interface that let us build task chain …\nContains the error value\nContains the success value\nSince we store actions behind dyn ActionTrait, we need an …\nWill be called on each <code>Program</code> iteration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvide debug name of action\nBranches execution flow into separate, independent paths …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAdds new branch to flow execution\nThis is to check whether the event is received or not\nTo be called when the sync action is created as part of …\nTo be called when the trigger action is created as part of …\nReturns the argument unchanged.\nTo get the instance of Event\nCalls <code>U::from(self)</code>.\nTo be called when trigger action is executed\nTo be called when sync action is executed\nTODO: Capturing object (owned, arced, closure) seems to be …\nReturns the argument unchanged.\nCreates Invoke action from plain async function\nCreates Invoke action from plain function pointer\nTODO: This is marked as unsafe right now (as precaution …\nCalls <code>U::from(self)</code>.\nWill be called on each sequence step\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a new sequence action\nAdd sequence step\nSync action\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWill be called on each trigger action\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreate a trigger action for triggering a single event\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhole description to Task Chain is delivered via this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShall start running a task chain in a <code>loop</code>. This means …\nShall start running a task chain <code>N</code> times\nShould notify program to stop executing as soon as …\nWhen set, each program iteration will align to this …")